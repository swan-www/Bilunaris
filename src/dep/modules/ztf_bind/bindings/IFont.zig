// auto generated by c2z
const std = @import("std");
//const cpp = @import("cpp");

const graphics = @import("IGraphics.zig");

/// NOTE(gmodarelli): Manually added plaftorm initialization for font system
extern fn _1_platformInitFontSystem() bool;
pub fn platformInitFontSystem() bool {
    return _1_platformInitFontSystem();
}

extern fn _1_platformExitFontSystem() void;
pub fn platformExitFontSystem() void {
    return _1_platformExitFontSystem();
}

const CameraMatrix = anyopaque;
const ReloadType = graphics.ReloadType;
const float2 = [2]f32;
const int2 = [2]i32;
const mat4 = anyopaque;

/// Creation information for initializing Forge Rendering for fonts and text
pub const FontSystemDesc = extern struct {
    pRenderer: *Renderer = undefined,
    mFontstashRingSizeBytes: u32 = @as(u32, @intCast(1024 * 1024)),
};

/// Creation information for initializing Forge Rendering for fonts and text
pub const FontSystemLoadDesc = extern struct {
    pCache: *PipelineCache,
    mLoadType: ReloadType,
    /// enum TinyImageFormat
    mColorFormat: u32,
    /// enum TinyImageFormat
    mDepthFormat: u32,
    mWidth: u32,
    mHeight: u32,
    /// enum CullMode
    mCullMode: u32,
    /// enum CompareMode
    mDepthCompareMode: u32,
};

/// Creation information for loading a font from a file using The Forge
pub const FontDesc = extern struct {
    pFontName: [*c]const u8 = "\"default\"",
    pFontPath: [*c]const u8 = null,
};

/// Creation information for loading a font from a file using The Forge
/// Aggregation of information necessary for drawing text with The Forge
pub const FontDrawDesc = extern struct {
    pText: [*c]const u8 = null,
    mFontID: u32 = @as(u32, @intCast(0)),
    /// Provided color should be A8B8G8R8_SRGB
    mFontColor: u32 = 4294967295,
    mFontSize: f32 = 16,
    mFontSpacing: f32 = 0,
    mFontBlur: f32 = 0,
};

/// Aggregation of information necessary for drawing text with The Forge
extern fn _1_initFontSystem_(pDesc: [*c]FontSystemDesc) bool;
/// Initializes Forge Rendering objects associated with Font Rendering
/// To be called at application initialization time by the App Layer
pub const initFontSystem = _1_initFontSystem_;

extern fn _1_exitFontSystem_() void;
/// Frees Forge Rendering objects and memory associated with Font Rendering
/// To be called at application shutdown time by the App Layer
pub const exitFontSystem = _1_exitFontSystem_;

extern fn _1_loadFontSystem_(pDesc: [*c]const FontSystemLoadDesc) void;
/// Loads Font Rendering resources depending on FontSystemLoadDesc::mLoadType
/// To be called at application load time by the App Layer
pub const loadFontSystem = _1_loadFontSystem_;

extern fn _1_unloadFontSystem_(unloadType: ReloadType) void;
/// Unloads Font Rendering resources depending on FontSystemLoadDesc::mLoadType
/// To be called at application unload time by the App Layer
pub const unloadFontSystem = _1_unloadFontSystem_;

// NOTE(gmodarelli): x and y are screen coordinates in pixels
extern fn _1_cmdDrawTextWithFont_(pCmd: *Cmd, x: f32, y: f32, pDrawDesc: [*c]const FontDrawDesc) void;
/// Renders UI-style text to the screen using a loaded font w/ The Forge
/// This function will assert if Font Rendering has not been initialized
pub const cmdDrawTextWithFont = _1_cmdDrawTextWithFont_;

extern fn _1_cmdDrawWorldSpaceTextWithFont_(pCmd: [*c]Cmd, pMatWorld: [*c]const mat4, pMatProjView: [*c]const CameraMatrix, pDrawDesc: [*c]const FontDrawDesc) void;
/// Renders text as an object in the world using a loaded font w/ The Forge
/// This function will assert if Font Rendering has not been initialized
pub const cmdDrawWorldSpaceTextWithFont = _1_cmdDrawWorldSpaceTextWithFont_;

extern fn _1_cmdDrawDebugFontAtlas_(pCmd: [*c]Cmd, screenCoordsInPx: float2) void;
/// Debugging feature - draws the contents of the internal font atlas
pub const cmdDrawDebugFontAtlas = _1_cmdDrawDebugFontAtlas_;

extern fn _1_fntDefineFonts_(pDescs: [*c]const FontDesc, count: u32, pOutIDs: [*c]u32) void;
/// Loads an array of fonts from files and returns an array of their ID handles
pub const fntDefineFonts = _1_fntDefineFonts_;

extern fn _1_fntGetFontAtlasSize_() int2;
/// Get current font atlas size
pub const fntGetFontAtlasSize = _1_fntGetFontAtlasSize_;

extern fn _1_fntResetFontAtlas_(newAtlasSize: int2) void;
/// Clear all data from the font atlas and resize it to provide size. Pass zero to keep the current size.
pub const fntResetFontAtlas = _1_fntResetFontAtlas_;

extern fn _1_fntExpandAtlas_(additionalSize: int2) void;
/// Expands the font atlas size by given size without clearing the contents
pub const fntExpandAtlas = _1_fntExpandAtlas_;

extern fn _1_fntMeasureFontText_(pText: [*c]const u8, pDrawDesc: [*c]const FontDrawDesc) float2;
/// Returns the bounds of text that would be drawn to supplied specification
pub const fntMeasureFontText = _1_fntMeasureFontText_;

// opaques

const Renderer = anyopaque;
const Cmd = anyopaque;
const RenderTarget = anyopaque;
const PipelineCache = anyopaque;
