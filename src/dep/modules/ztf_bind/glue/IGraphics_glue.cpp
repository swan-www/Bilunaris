// auto generated by c2z
#include <new>

#include "../../../../../dep/ztf/src/dep/common/tfalias/Common_3/Graphics/Interfaces/IGraphics.h"

extern "C" void _1_setRendererInitializationError_(const char* reason) { ::setRendererInitializationError(reason); }
extern "C" bool _1_hasRendererInitializationError_(const char** outReason) { return ::hasRendererInitializationError(outReason); }
extern "C" void _1_initRendererContext_(const char* appName, const RendererContextDesc* pSettings, RendererContext** ppContext)
{
    ::initRendererContext(appName, pSettings, ppContext);
}
extern "C" void _1_exitRendererContext_(RendererContext* pContext) { ::exitRendererContext(pContext); }
extern "C" void _1_initRenderer_(const char* appName, const RendererDesc* pSettings, Renderer** ppRenderer)
{
    ::initRenderer(appName, pSettings, ppRenderer);
}
extern "C" void _1_exitRenderer_(Renderer* pRenderer) { ::exitRenderer(pRenderer); }

extern "C" void _1_addQueue(Renderer* r, QueueDesc* qd, Queue** q) { ::addQueue(r, qd, q); }
extern "C" void _1_removeQueue(Renderer* r, Queue* q) { ::removeQueue(r, q); }
extern "C" void _1_addSemaphore(Renderer* r, Semaphore** s) { ::addSemaphore(r, s); }
extern "C" void _1_removeSemaphore(Renderer* r, Semaphore* s) { ::removeSemaphore(r, s); }
extern "C" void _1_addSampler(Renderer* r, const SamplerDesc* d, Sampler** s) { ::addSampler(r, d, s); }
extern "C" void _1_removeSampler(Renderer* r, Sampler* s) { ::removeSampler(r, s); }

extern "C" void        _1_addFence(Renderer* r, Fence** f) { ::addFence(r, f); }
extern "C" void        _1_removeFence(Renderer* r, Fence* f) { ::removeFence(r, f); }
extern "C" void        _1_addSwapChain(Renderer* r, const SwapChainDesc* d, SwapChain** s) { ::addSwapChain(r, d, s); }
extern "C" void        _1_removeSwapChain(Renderer* r, SwapChain* s) { ::removeSwapChain(r, s); }
extern "C" const void* _1_addResourceHeap_ = (void*)&::addResourceHeap;
extern "C" const void* _1_removeResourceHeap_ = (void*)&::removeResourceHeap;
extern "C" void        _1_addCmdPool(Renderer* r, const CmdPoolDesc* d, CmdPool** c) { ::addCmdPool(r, d, c); }
extern "C" void        _1_removeCmdPool(Renderer* r, CmdPool* c) { ::removeCmdPool(r, c); }
extern "C" void        _1_addCmd(Renderer* r, const CmdDesc* d, Cmd** c) { ::addCmd(r, d, c); }
extern "C" void        _1_removeCmd(Renderer* r, Cmd* c) { ::removeCmd(r, c); }
extern "C" const void* _1_addCmd_n_ = (void*)&::addCmd_n;
extern "C" const void* _1_removeCmd_n_ = (void*)&::removeCmd_n;
extern "C" void        _1_addRenderTarget(Renderer* r, RenderTargetDesc* d, RenderTarget** rt) { ::addRenderTarget(r, d, rt); }
extern "C" void        _1_removeRenderTarget(Renderer* r, RenderTarget* rt) { ::removeRenderTarget(r, rt); }
extern "C" const void* _1_addShaderBinary_ = (void*)&::addShaderBinary;
extern "C" void        _1_removeShader(Renderer* r, Shader* s) { ::removeShader(r, s); }
extern "C" void        _1_addRootSignature(Renderer* r, RootSignatureDesc* d, RootSignature** rs) { ::addRootSignature(r, d, rs); }
extern "C" void        _1_removeRootSignature(Renderer* r, RootSignature* rs) { ::removeRootSignature(r, rs); }
extern "C" uint32_t    _1_getDescriptorIndexFromName(RootSignature* rs, const char* n) { return ::getDescriptorIndexFromName(rs, n); }
extern "C" void        _1_addPipeline(Renderer* r, PipelineDesc* d, Pipeline** p) { ::addPipeline(r, d, p); }
extern "C" void        _1_removePipeline(Renderer* r, Pipeline* p) { ::removePipeline(r, p); }
extern "C" const void* _1_addPipelineCache_ = (void*)&::addPipelineCache;
extern "C" const void* _1_getPipelineCacheData_ = (void*)&::getPipelineCacheData;
extern "C" const void* _1_removePipelineCache_ = (void*)&::removePipelineCache;
extern "C" void        _1_addDescriptorSet(Renderer* pRenderer, const DescriptorSetDesc* pDesc, DescriptorSet** ppDescriptorSet)
{
    ::addDescriptorSet(pRenderer, pDesc, ppDescriptorSet);
}
extern "C" void _1_removeDescriptorSet(Renderer* pRenderer, DescriptorSet* pDescriptorSet)
{
    ::removeDescriptorSet(pRenderer, pDescriptorSet);
}
extern "C" void _1_updateDescriptorSet(Renderer* pRenderer, uint32_t index, DescriptorSet* pDescriptorSet, uint32_t count,
                                       const DescriptorData* pParams)
{
    ::updateDescriptorSet(pRenderer, index, pDescriptorSet, count, pParams);
}
extern "C" void        _1_resetCmdPool(Renderer* r, CmdPool* c) { ::resetCmdPool(r, c); }
extern "C" void        _1_beginCmd(Cmd* c) { ::beginCmd(c); }
extern "C" void        _1_endCmd(Cmd* c) { ::endCmd(c); }
extern "C" void        _1_cmdBindRenderTargets(Cmd* c, BindRenderTargetsDesc* d) { ::cmdBindRenderTargets(c, d); }
extern "C" const void* _1_cmdSetSampleLocations_ = (void*)&::cmdSetSampleLocations;
extern "C" void        _1_cmdSetViewport(Cmd* c, float x, float y, float w, float h, float mind, float maxd)
{
    ::cmdSetViewport(c, x, y, w, h, mind, maxd);
}
extern "C" void        _1_cmdSetScissor(Cmd* c, uint32_t x, uint32_t y, uint32_t w, uint32_t h) { ::cmdSetScissor(c, x, y, w, h); }
extern "C" const void* _1_cmdSetStencilReferenceValue_ = (void*)&::cmdSetStencilReferenceValue;
extern "C" void        _1_cmdBindPipeline(Cmd* c, Pipeline* p) { ::cmdBindPipeline(c, p); }
extern "C" void        _1_cmdBindDescriptorSet(Cmd* pCmd, uint32_t index, DescriptorSet* pDescriptorSet)
{
    ::cmdBindDescriptorSet(pCmd, index, pDescriptorSet);
}
extern "C" void _1_cmdBindPushConstants(Cmd* pCmd, RootSignature* pRootSignature, uint32_t paramIndex, const void* pConstants)
{
    ::cmdBindPushConstants(pCmd, pRootSignature, paramIndex, pConstants);
}
extern "C" const void* _1_cmdBindDescriptorSetWithRootCbvs_ = (void*)&::cmdBindDescriptorSetWithRootCbvs;
extern "C" void        _1_cmdBindIndexBuffer(Cmd* c, Buffer* b, uint32_t it, uint64_t o) { ::cmdBindIndexBuffer(c, b, it, o); }
extern "C" void        _1_cmdBindVertexBuffer(Cmd* c, uint32_t bc, Buffer** b, const uint32_t* s, const uint64_t* o)
{
    ::cmdBindVertexBuffer(c, bc, b, s, o);
}
extern "C" void        _1_cmdDraw(Cmd* pCmd, uint32_t vertexCount, uint32_t firstVertex) { ::cmdDraw(pCmd, vertexCount, firstVertex); }
extern "C" const void* _1_cmdDrawInstanced_ = (void*)&::cmdDrawInstanced;
extern "C" void        _1_cmdDrawIndexed(Cmd* pCmd, uint32_t indexCount, uint32_t firstIndex, uint32_t firstVertex)
{
    ::cmdDrawIndexed(pCmd, indexCount, firstIndex, firstVertex);
}
extern "C" void _1_cmdDrawIndexedInstanced(Cmd* c, uint32_t ic, uint32_t fi, uint32_t inc, uint32_t fv, uint32_t fin)
{
    ::cmdDrawIndexedInstanced(c, ic, fi, inc, fv, fin);
}
extern "C" void _1_cmdDispatch(Cmd* pCmd, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
    ::cmdDispatch(pCmd, groupCountX, groupCountY, groupCountZ);
}
extern "C" void _1_cmdResourceBarrier(Cmd* c, uint32_t bc, BufferBarrier* b, uint32_t tc, TextureBarrier* t, uint32_t rc,
                                      RenderTargetBarrier* r)
{
    ::cmdResourceBarrier(c, bc, b, tc, t, rc, r);
}
extern "C" void _1_acquireNextImage(Renderer* r, SwapChain* sc, Semaphore* s, Fence* f, uint32_t* i)
{
    ::acquireNextImage(r, sc, s, f, i);
};
extern "C" void            _1_queueSubmit(Queue* q, QueueSubmitDesc* d) { ::queueSubmit(q, d); }
extern "C" void            _1_queuePresent(Queue* q, QueuePresentDesc* d) { ::queuePresent(q, d); }
extern "C" void            _1_waitQueueIdle(Queue* q) { ::waitQueueIdle(q); }
extern "C" void            _1_getFenceStatus(Renderer* r, Fence* f, FenceStatus* s) { ::getFenceStatus(r, f, s); }
extern "C" void            _1_waitForFences(Renderer* r, uint32_t c, Fence** f) { ::waitForFences(r, c, f); }
extern "C" const void*     _1_toggleVSync_ = (void*)&::toggleVSync;
extern "C" TinyImageFormat _1_getSupportedSwapchainFormat(Renderer* r, SwapChainDesc* d, ColorSpace cs)
{
    return ::getSupportedSwapchainFormat(r, d, cs);
}
extern "C" uint32_t _1_getRecommendedSwapchainImageCount(Renderer* r, WindowHandle* wh)
{
    return ::getRecommendedSwapchainImageCount(r, wh);
}
extern "C" const void* _1_addIndirectCommandSignature_ = (void*)&::addIndirectCommandSignature;
extern "C" const void* _1_removeIndirectCommandSignature_ = (void*)&::removeIndirectCommandSignature;
extern "C" const void* _1_cmdExecuteIndirect_ = (void*)&::cmdExecuteIndirect;
extern "C" const void* _1_getTimestampFrequency_ = (void*)&::getTimestampFrequency;
extern "C" const void* _1_addQueryPool_ = (void*)&::addQueryPool;
extern "C" const void* _1_removeQueryPool_ = (void*)&::removeQueryPool;
extern "C" const void* _1_cmdBeginQuery_ = (void*)&::cmdBeginQuery;
extern "C" const void* _1_cmdEndQuery_ = (void*)&::cmdEndQuery;
extern "C" const void* _1_cmdResolveQuery_ = (void*)&::cmdResolveQuery;
extern "C" const void* _1_cmdResetQuery_ = (void*)&::cmdResetQuery;
extern "C" const void* _1_getQueryData_ = (void*)&::getQueryData;
extern "C" const void* _1_calculateMemoryStats_ = (void*)&::calculateMemoryStats;
extern "C" const void* _1_calculateMemoryUse_ = (void*)&::calculateMemoryUse;
extern "C" const void* _1_freeMemoryStats_ = (void*)&::freeMemoryStats;
extern "C" const void* _1_cmdBeginDebugMarker_ = (void*)&::cmdBeginDebugMarker;
extern "C" const void* _1_cmdEndDebugMarker_ = (void*)&::cmdEndDebugMarker;
extern "C" const void* _1_cmdAddDebugMarker_ = (void*)&::cmdAddDebugMarker;
extern "C" const void* _1_cmdWriteMarker_ = (void*)&::cmdWriteMarker;
extern "C" const void* _1_setBufferName_ = (void*)&::setBufferName;
extern "C" const void* _1_setTextureName_ = (void*)&::setTextureName;
extern "C" const void* _1_setRenderTargetName_ = (void*)&::setRenderTargetName;
extern "C" const void* _1_setPipelineName_ = (void*)&::setPipelineName;
